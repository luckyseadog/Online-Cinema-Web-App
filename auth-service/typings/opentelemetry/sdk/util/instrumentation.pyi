"""
This type stub file was generated by pyright.
"""

from typing import Optional
from deprecated import deprecated
from opentelemetry.util.types import Attributes

class InstrumentationInfo:
    """Immutable information about an instrumentation library module.

    See `opentelemetry.trace.TracerProvider.get_tracer` for the meaning of these
    properties.
    """
    __slots__ = ...
    @deprecated(version="1.11.1", reason="You should use InstrumentationScope")
    def __init__(self, name: str, version: Optional[str] = ..., schema_url: Optional[str] = ...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, value) -> bool:
        ...
    
    def __lt__(self, value) -> bool:
        ...
    
    @property
    def schema_url(self) -> Optional[str]:
        ...
    
    @property
    def version(self) -> Optional[str]:
        ...
    
    @property
    def name(self) -> str:
        ...
    


class InstrumentationScope:
    """A logical unit of the application code with which the emitted telemetry can be
    associated.

    See `opentelemetry.trace.TracerProvider.get_tracer` for the meaning of these
    properties.
    """
    __slots__ = ...
    def __init__(self, name: str, version: Optional[str] = ..., schema_url: Optional[str] = ..., attributes: Optional[Attributes] = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, value: object) -> bool:
        ...
    
    def __lt__(self, value: object) -> bool:
        ...
    
    @property
    def schema_url(self) -> Optional[str]:
        ...
    
    @property
    def version(self) -> Optional[str]:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def attributes(self) -> Attributes:
        ...
    
    def to_json(self, indent=...) -> str:
        ...
    


